{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","clasname","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,G,MAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAO,OACPC,MAAUT,EACVU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uBCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDVyBK,CAAa1B,GAAhCa,EAJwB,EAI7BN,KAAaa,EAJgB,EAIhBA,QAOrB,OACI,oCACI,wBAAIO,SAAS,qCAAb,IAAmD3B,EAAnD,KAECoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEZ,yBAAKA,UAAU,aAGPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UESvCmB,EA9BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,eAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAQvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGA,4BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,kBAAC,EAAD,CACI4B,IAAQ5B,EACRA,SAAaA,UCpBzC+B,IAASC,OAAQ,kBACb,EADa,MAEbC,SAASC,eAAe,U","file":"static/js/main.a6292edd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types/';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n    \n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type = \"text\"\n                value = { inputValue }\n                onChange = { handleInputChange }\n            />\n        </form>\n    )\n}\n\n// Los propTypes son para declarar los parametro del componente, aqui se indica el tipo y si es requerido\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n","\n\nexport const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=TESgPoG5BlRycfTvYD9kdMIhzCGLEDn9`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n    // const [images, setImages] = useState([])\n\n    const { data:images, loading} = useFetchGifs(category);\n\n    // // Con este metodo se puede establer una condicional para ejecutar el codigo que se encuentra dentro\n    // useEffect( () => {\n    //     getGifs(category).then(setImages);\n    // }, [category]);\n\n    return (\n        <>\n            <h3 clasname=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            \n            <div className=\"card-grid\">\n                \n                {\n                    images.map( img => (\n                        <GifGridItem key={img.id} {...img}/>\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\n\nconst GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState(['Evangelion']);\n\n    // const handleAdd = () => {\n    //     setCategories(cats => [...cats, 'Naruto']);\n    // };\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                    categories.map( category =>\n                        //  <li key={ category }> {category}</li>\n                        <GifGrid \n                            key = { category } \n                            category = { category }/>\n                    )\n                }\n            </ol>\n\n        </>\n    );\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\nReactDOM.render( <\n    GifExpertApp / > ,\n    document.getElementById('root')\n);"],"sourceRoot":""}